library IEEE; 
use IEEE.STD_LOGIC_1164.all; 
 
entity Bin7SegDecoder is 
	 generic(n : natural := 8);
	 port(a, b : in std_logic_vector(n-1 downto 0); 
			op : in std_logic_vector(2 downto 0); 
			r, m : out std_logic_vector(n-1 downto 0);
			binInput : in std_logic_vector(n-1 downto 0); 
			decOut_n : out std_logic_vector(6 downto 0)); 
end Bin7SegDecoder; 
 
architecture Behavioral of Bin7SegDecoder is 
	signal s_a, s_b, s_r : unsigned(n-1 downto 0); 
	signal s_m : unsigned(2*n-1 downto 0); 
begin
		s_a <= unsigned(a); 
		s_b <= unsigned(b); 
		 
		s_m <= s_a * s_b; 
		
		with op select 
			 s_r <= s_a + s_b when "000", 
					  s_a - s_b when "001", 
					  s_m(n-1 downto 0) when "010", 
					  s_a / s_b when "011", 
					  s_a rem s_b when "100", 
					  s_a and s_b when "101", 
					  s_a or s_b when "110", 
					  s_a xor s_b when "111"; 
			 
		 r <= std_logic_vector(s_r); 
			  
		 m <= std_logic_vector(s_m(2*n-1 downto n)) when op = "010" else 
				(others => '0'); 
				
		 binput <= std_logic_vector(s_r);
		 
		with s_r select 
			 decOut_n <= "1111001" when "0001", --1 
							"1101101" when "0010", --2
							 "0110000" when "0011", --3 
							"0011001" when "0100", --4 
							"0010010" when "0101", --5 
							"0000010" when "0110", --6 
							"1111000" when "0111", --7 
							"0000000" when "1000", --8 
							"0010000" when "1001", --9 
							"0001000" when "1010", --A 
							 "0000011" when "1011", --B 
							 "1000110" when "1100", --C 
							"0100001" when "1101", --D 
							"0000110" when "1110", --E 
							"0001110" when "1111", --F 
							"1000000" when others; --0 
end Behavioral; 